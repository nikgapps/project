name: Create Release and Publish to PyPI

on:
  push:
    branches:
      - main
    paths:
      - 'NikGapps/helper/assets/changelogs.yaml'
      - 'script.sh'
      - 'Dockerfile'
      - 'setup.py'
      - 'trigger release'
      - 'NikGapps/copy_repos.py'
      - 'NikGapps/cache.py'
  workflow_dispatch:

jobs:
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.increment_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v5

      - name: Fetch the latest release version
        id: latest_version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .name)
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Increment the version
        id: increment_version
        run: |
          LATEST_VERSION=$(echo $LATEST_VERSION | sed 's/v//') # Remove 'v' if present
          IFS='.' read -r V_MAJOR V_MINOR V_PATCH <<< "$LATEST_VERSION"
          if [[ $V_MINOR -eq 99 ]]; then
            V_MAJOR=$((V_MAJOR + 1))
            V_MINOR=0
          else
            V_MINOR=$((V_MINOR + 1))
          fi
          NEW_VERSION="$V_MAJOR.$V_MINOR"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTH }}
          script: |
            const newVersion = process.env.NEW_VERSION;
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${newVersion}`,
              name: newVersion,
              draft: false,
              prerelease: false,
            });

      - name: Delete older releases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTH }}
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });
            
            // Sort releases by creation date descending (latest first)
            const sortedReleases = releases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            // Get releases beyond the latest 5
            const releasesToDelete = sortedReleases.slice(5);
            
            for (const release of releasesToDelete) {
              // Delete the release
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
              });
            
              // Delete the tag associated with the release
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`,
                });
              } catch (error) {
                // Ignore errors if the tag does not exist
                if (error.status !== 422) {
                  throw error;
                }
              }
            
              console.log(`Deleted release ${release.name} and tag ${release.tag_name}`);
            }

  publish-to-pypi:
    name: Upload Release to PyPI
    runs-on: ubuntu-latest
    needs: auto-release
    environment: release
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Update the version
        run: |
          VERSION=${{ needs.auto-release.outputs.new_version }}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          python update_version.py --version $VERSION
      - name: Build package
        run: python -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1